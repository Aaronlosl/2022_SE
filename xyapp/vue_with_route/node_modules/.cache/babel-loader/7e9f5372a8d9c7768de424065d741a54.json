{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport '@element-plus/icons-vue'; // ensure csrf-token append to post requests\n// https://www.freesion.com/article/8944598323/\n\naxios.interceptors.request.use(config => {\n  config.headers['X-Requested-With'] = 'XMLHttpRequest';\n  let regex = /.*csrftoken=([^;.]*).*$/; // 用于从cookie中匹配 csrftoken值\n\n  config.headers['X-CSRFToken'] = document.cookie.match(regex) === null ? null : document.cookie.match(regex)[1];\n  return config;\n});\nconst baseURL = 'http://localhost:3000';\naxios.defaults.baseURL = baseURL;\n/*\nconst loginCheck = params => {\n  return axios.post('/login', params).then(res => {\n      return res.data\n  })\n}\n*/\n\nexport default {\n  name: \"HelloWorld\",\n  props: {\n    msg: String\n  },\n\n  data() {\n    return {\n      username: '',\n      password: ''\n    };\n  },\n\n  methods: {\n    Login() {\n      if (this.username == \"\" || this.password == \"\") {\n        alert(\"Please check your input\");\n      } else {\n        axios.post('http://127.0.0.1:8000/json/auth/', {\n          username: this.username,\n          password: this.password\n        }).then(response => {\n          console.log(response.data);\n\n          if (response.data['status'] != 1) {\n            alert(response.data['message']);\n          } else {\n            alert(response.data['message']);\n            this.$router.push('/FirstPage');\n          }\n        });\n      }\n    }\n    /*\n    async Login(){\n      this.form = \"&username:\" + this.username + \"&password:\" + this.password\n      // 调用登录请求接口\n      loginCheck(this.form).then(res => {\n        // 登录成功,提示成功信息，然后跳转到首页\n        if(res.meta.status === 200){\n          // 提示成功信息\n          this.$message({\n              message: res.meta.msg,\n              type: 'success'\n        });\n          var that = this;\n          // 跳转到首页\n          setTimeout(function(){\n              that.$router.push({name:'FirstPage'})\n          },1000)\n        } else {\n          // 登录失败，提示错误信息\n          this.$message({\n              message: 'Login Failed,' + res.meta.msg,\n              type: 'error'\n          });\n        }\n      })\n    }\n    */\n\n\n  }\n};","map":{"version":3,"mappings":";AA+DA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAgB,yBAAhB,C,CAEA;AACA;;AACAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;EACzCA,MAAM,CAACC,OAAP,CAAe,kBAAf,IAAqC,gBAArC;EACA,IAAIC,KAAI,GAAI,yBAAZ,CAFyC,CAEF;;EACvCF,MAAM,CAACC,OAAP,CAAe,aAAf,IAAgCE,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsBH,KAAtB,MAAiC,IAAjC,GAAwC,IAAxC,GAA+CC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsBH,KAAtB,EAA6B,CAA7B,CAA/E;EACA,OAAOF,MAAP;AACD,CALD;AAOA,MAAMM,OAAM,GAAI,uBAAhB;AACAV,KAAK,CAACW,QAAN,CAAeD,OAAf,GAAyBA,OAAzB;AACA;AACA;;;;AAIA;AACA;;AACA,eAAe;EACbE,IAAI,EAAE,YADO;EAEbC,KAAK,EAAE;IACHC,GAAG,EAAEC;EADF,CAFM;;EAKbC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EADL;MAELC,QAAQ,EAAE;IAFL,CAAP;EAID,CAVY;;EAWbC,OAAO,EAAC;IACNC,KAAK,GAAE;MACL,IAAG,KAAKH,QAAL,IAAiB,EAAjB,IAAuB,KAAKC,QAAL,IAAiB,EAA3C,EAA+C;QAC7CG,KAAK,CAAC,yBAAD,CAAL;MACF,CAFA,MAEO;QACHrB,KAAK,CAACsB,IAAN,CAAW,kCAAX,EAA8C;UAACL,QAAQ,EAAC,KAAKA,QAAf;UAAwBC,QAAQ,EAAC,KAAKA;QAAtC,CAA9C,EACCK,IADD,CACOC,QAAD,IAAc;UAClBC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACR,IAArB;;UACA,IAAGQ,QAAQ,CAACR,IAAT,CAAc,QAAd,KAA2B,CAA9B,EAAgC;YAC9BK,KAAK,CAACG,QAAQ,CAACR,IAAT,CAAc,SAAd,CAAD,CAAL;UACF,CAFA,MAEO;YACLK,KAAK,CAACG,QAAQ,CAACR,IAAT,CAAc,SAAd,CAAD,CAAL;YACA,KAAKW,OAAL,CAAaC,IAAb,CAAkB,YAAlB;UACF;QACD,CATD;MAUJ;IACD;IACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAjBM;AAXK,CAAf","names":["axios","interceptors","request","use","config","headers","regex","document","cookie","match","baseURL","defaults","name","props","msg","String","data","username","password","methods","Login","alert","post","then","response","console","log","$router","push"],"sourceRoot":"","sources":["/Users/wangrixuan/Desktop/vue_with_route/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <h3>\n      \n      <p>\n        Please enter your username below<br>\n        <textarea \n          class=\"username\" \n          maxlength=\"25\" \n          placeholder=\"less than 25 chars\" \n          cols=\"32\" \n          style=\"resize:none;\"\n          v-model=\"username\">\n        </textarea><br>\n        <el-input \n          v-model=\"input\" \n          placeholder=\"less than 25 chars\"\n          clearable>\n        </el-input>\n      </p>\n      <p>\n        Please enter your password below. <br>\n        <textarea \n          class=\"password\" \n          maxlength=\"25\" \n          placeholder=\"less than 25 chars\" \n          cols=\"32\" \n          style=\"resize:none;\"\n          v-model=\"password\">\n        </textarea><br>\n        <el-input \n          v-model=\"input\" \n          placeholder=\"less than 25 chars\"\n          clearable\n          show-password>\n        </el-input>\n      </p>\n    </h3>  \n    <button @click=\"Login()\">\n      <img src=\"@/assets/箭头一.svg\">\n    </button>\n    <br>\n    \n    <RouterView></RouterView>\n    \n  </div>\n  <div class=\"link\">\n    <ul>\n      <li><a href=\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel\" target=\"_blank\" rel=\"noopener\">\n        <img src=\"@/assets/facebook.svg\">\n      </a></li>\n      <li><a href=\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-router\" target=\"_blank\" rel=\"noopener\">\n        <img src=\"@/assets/twitter.svg\">\n      </a></li>\n      <li><a href=\"https://github.com/Aaronlosl/2022_SE\" target=\"_blank\" rel=\"noopener\">\n        <img src=\"@/assets/github.svg\">\n      </a></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\"\nimport { } from '@element-plus/icons-vue'\n\n// ensure csrf-token append to post requests\n// https://www.freesion.com/article/8944598323/\naxios.interceptors.request.use((config) => {\n  config.headers['X-Requested-With'] = 'XMLHttpRequest';\n  let regex = /.*csrftoken=([^;.]*).*$/; // 用于从cookie中匹配 csrftoken值\n  config.headers['X-CSRFToken'] = document.cookie.match(regex) === null ? null : document.cookie.match(regex)[1];\n  return config\n});\n\nconst baseURL = 'http://localhost:3000'\naxios.defaults.baseURL = baseURL\n/*\nconst loginCheck = params => {\n  return axios.post('/login', params).then(res => {\n      return res.data\n  })\n}\n*/\nexport default {\n  name: \"HelloWorld\",\n  props: {\n      msg: String\n  },\n  data() {\n    return {\n      username: '',\n      password: '',\n    }\n  },\n  methods:{\n    Login(){\n      if(this.username == \"\" || this.password == \"\") {\n        alert(\"Please check your input\")\n      } else {\n          axios.post('http://127.0.0.1:8000/json/auth/',{username:this.username,password:this.password})\n          .then((response) => {\n            console.log(response.data)\n            if(response.data['status'] != 1){\n              alert(response.data['message'])\n            } else {\n              alert(response.data['message'])\n              this.$router.push('/FirstPage');\n            }\n          })\n      }\n    },\n    /*\n    async Login(){\n      this.form = \"&username:\" + this.username + \"&password:\" + this.password\n      // 调用登录请求接口\n      loginCheck(this.form).then(res => {\n        // 登录成功,提示成功信息，然后跳转到首页\n        if(res.meta.status === 200){\n          // 提示成功信息\n          this.$message({\n              message: res.meta.msg,\n              type: 'success'\n        });\n          var that = this;\n          // 跳转到首页\n          setTimeout(function(){\n              that.$router.push({name:'FirstPage'})\n          },1000)\n        } else {\n          // 登录失败，提示错误信息\n          this.$message({\n              message: 'Login Failed,' + res.meta.msg,\n              type: 'error'\n          });\n        }\n      })\n    }\n    */\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh2 {\n  margin-right: -117px;\n}\nh3 {\n  font: 1em sans-serif;\n  margin: 80px 0px 60px;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 100px 0px;\n}\na {\n  color: #000000;\n  margin: 30px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}